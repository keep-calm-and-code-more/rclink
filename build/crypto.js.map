{"version":3,"sources":["../src/crypto.js"],"names":["settings","Settings","getHashBytes","alg","data","hash","crypto","createHash","update","digest","exports","Sum","sum","a","b","Sign","prvKey","sig","KJUR","Signature","init","updateString","sigValueHex","sign","verifySign","pubKey","isValid","verify","savePrvKeyFile","file_name","prv_key_hex","JsrsasignUtil","saveFileBinByHex","saveCertFile","cert_pem","saveFile","VerifyPrvKeyWithPass","prv_key_pem","password","result","KEYUTIL","getKey","e","console","log","CreateKeyPair","keylenOrCurve","key_pair","generateKeypair","CreatePrvKeyByImport","prv_key_pem2hex","identity","Jsrsasign","hextopem","GenCertificateWithPemPrvKey","user_info","certificate_file_save_location","certificate_file_location","Error","prv_key_obj","pub_key_obj","xy","pubKeyHex","curve","tbs","asn1","x509","TBSCertificate","setSerialNumberByParam","parseInt","replace","setSignatureAlgByParam","issuer_str","uer_str","setIssuerByParam","setSubjectByParam","setSubjectPublicKey","time","Moment","utc","setNotBeforeByParam","format","year","setNotAfterByParam","cert","Certificate","getPEMString","phone","GenCertificateWithBinPrvkeyFile","readFileHexByBin","prvkey_file_location"],"mappings":"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","sourcesContent":["import crypto from 'crypto';\nimport {KEYUTIL, KJUR} from 'jsrsasign';\nimport Jsrsasign from 'jsrsasign';\nimport JsrsasignUtil from 'jsrsasign-util';\nimport Uuidv1 from 'uuid/v1';\nimport Moment from 'moment';\nimport Settings from './setting';\n\n\nvar settings = new Settings();\n\nvar getHashBytes = function (alg, data) {\n    let hash = crypto.createHash(alg);\n    hash.update(data);\n    return hash.digest();\n}\nexports.Sum = function sum(a, b) {\n    return a + b;\n  }\n/**\n * Sign data with private key\n * @param alg 算法\n * @param prvKey 私钥\n * @param data 签名的数据\n * @return\n */\nexports.Sign = function (alg, prvKey, data) {\n    var sig = new KJUR.crypto.Signature({'alg':alg});\n    sig.init(prvKey);\n    sig.updateString(data);\n    var sigValueHex = sig.sign();\n    return sigValueHex;\n}\n\n/**\n * 鉴定签名是否正确\n * @param alg 算法\n * @param pubKey 公钥\n * @param sigValueHex 签名后的数据\n * @param data 签名的数据\n * @return result true or false\n */\nexports.verifySign = function (alg, pubKey, sigValueHex, data) {\n    var sig = new KJUR.crypto.Signature({'alg':alg});\n    sig.init(pubKey);\n    sig.updateString(data);\n    var isValid = sig.verify(sigValueHex);\n    return isValid;\n}\n\nconst savePrvKeyFile = function (file_name, prv_key_hex) {\n    JsrsasignUtil.saveFileBinByHex(file_name, prv_key_hex);\n}\n\nconst saveCertFile = function (file_name, cert_pem) {\n    JsrsasignUtil.saveFile(file_name, cert_pem);\n}\n\n//鉴定私钥的密码是否正确\nconst VerifyPrvKeyWithPass = function (prv_key_pem, password) {\n    let result;\n    try {\n        KEYUTIL.getKey(prv_key_pem, password)\n        result = true;\n    }\n    catch (e) {\n        console.log(e)\n        result = false;\n    }\n    return result;\n}\n\n//Create key pair with ECCDSA (secp256r1)\n//Meanwhile save encrypted PSK#8 PEM private key in a local binary file \nconst CreateKeyPair = function (alg, keylenOrCurve) {\n    let key_pair = KEYUTIL.generateKeypair(alg, keylenOrCurve);\n    return key_pair;\n}\n\nconst CreatePrvKeyByImport = function (prv_key_pem2hex, identity) {\n    return Jsrsasign.hextopem(prv_key_pem2hex, 'ENCRYPTED PRIVATE KEY');\n}\n\n//Generate X509 PEM certificate signed by self\n//With keyPair info created within CreateKeyPair functionality\nconst GenCertificateWithPemPrvKey = function (password, user_info, prv_key_pem) {\n    let certificate_file_save_location = settings.certificate_file_location;\n    if (!VerifyPrvKeyWithPass(prv_key_pem, password))\n        throw new Error('解密私钥失败');\n    let prv_key_obj = KEYUTIL.getKey(prv_key_pem, password);\n\n    let pub_key_obj = KEYUTIL.getKey({xy: prv_key_obj.pubKeyHex, curve: 'secp256k1'});\n    let tbs = new KJUR.asn1.x509.TBSCertificate();\n    tbs.setSerialNumberByParam({'int': parseInt(Uuidv1().replace(/-/g, ''), 16)});\n    tbs.setSignatureAlgByParam({'name': 'SHA256withECDSA'});\n    let issuer_str = '/CN=PicCopyRightRegisterAPP/C=China/OU=SDR/O=ISCAS/L=BJ';\n    let uer_str = '/CN=PicCopyRightRegisterUer/C=China';\n    tbs.setIssuerByParam({'str': issuer_str});\n    tbs.setSubjectByParam({'str': uer_str});\n    tbs.setSubjectPublicKey(pub_key_obj);\n    let time = Moment.utc();\n    tbs.setNotBeforeByParam({'type': 'gen', 'str': time.format('YYYYMMDDhhmmss') + 'Z'});\n    time = Moment.utc(time).year(time.year() + 1);\n    tbs.setNotAfterByParam({'type': 'gen', 'str': time.format('YYYYMMDDhhmmss') + 'Z'});\n\n    let cert = new KJUR.asn1.x509.Certificate({'tbscertobj': tbs, 'prvkeyobj': prv_key_obj});\n    cert.sign();\n    let cert_pem = cert.getPEMString();\n\n    console.log(\"cert_pem: \", cert_pem);\n\n    const identity = user_info.phone;\n    return cert_pem;\n}\n\n\nconst GenCertificateWithBinPrvkeyFile = function (password, user_info) {\n\n    const identity = user_info.phone;\n    let prv_key_hex = JsrsasignUtil.readFileHexByBin(settings.prvkey_file_location + '/' + identity + '.prvkey');\n    let prv_key_pem = Jsrsasign.hextopem(prv_key_hex, 'ENCRYPTED PRIVATE KEY');\n\n    return GenCertificateWithPemPrvKey(password, user_info, prv_key_pem);\n}\n\n\nexports.VerifyPrvKeyWithPass = VerifyPrvKeyWithPass;\nexports.CreateKeyPair = CreateKeyPair;\nexports.CreatePrvKeyByImport = CreatePrvKeyByImport;\nexports.GenCertificateWithPemPrvKey = GenCertificateWithPemPrvKey;\nexports.GenCertificateWithBinPrvkeyFile = GenCertificateWithBinPrvkeyFile;\n"],"file":"crypto.js"}