{"version":3,"sources":["../src/crypto.test.js"],"names":["describe","kp1","kp2","ct1","ct2","alg","s11","prvKeyObj","s12","beforeEach","test","r","pubKeyObj","expect","toBeTruthy","toBeFalsy"],"mappings":";;AAAA;;AACA;;AAGAA,SAAS,WAAT,EAAsB,YAAM;AACxB;AACA,MAAMC,MAAM,2BAAc,IAAd,EAAoB,WAApB,CAAZ;AACA,MAAMC,MAAM,2BAAc,IAAd,EAAoB,WAApB,CAAZ;AACA,MAAMC,MAAM,iBAAZ;AACA,MAAMC,MAAM,iBAAZ;AAEA,MAAIC,MAAM,eAAV;AACA,MAAIC,MAAM,kBAAKD,GAAL,EAAUJ,IAAIM,SAAd,EAAyBJ,GAAzB,CAAV;AACA,MAAIK,MAAM,kBAAKH,GAAL,EAAUJ,IAAIM,SAAd,EAAyBH,GAAzB,CAAV,CATwB,CAW5B;;AACIK,aAAW,YAAM,CAGhB,CAHD;AAKAC,OAAK,qBAAL,EAA4B,YAAM;AAC9B,QAAIC,IAAI,wBAAWN,GAAX,EAAeJ,IAAIW,SAAnB,EAA8BN,GAA9B,EAAmCH,GAAnC,CAAR;AACAU,WAAOF,CAAP,EAAUG,UAAV;AACH,GAHD;AAIAJ,OAAK,qBAAL,EAA4B,YAAM;AAC9B,QAAIC,IAAI,wBAAWN,GAAX,EAAeJ,IAAIW,SAAnB,EAA8BN,GAA9B,EAAmCF,GAAnC,CAAR;AACAS,WAAOF,CAAP,EAAUI,SAAV;AACH,GAHD;AAIAL,OAAK,qBAAL,EAA4B,YAAM;AAC9B,QAAIC,IAAI,wBAAWN,GAAX,EAAeH,IAAIU,SAAnB,EAA8BN,GAA9B,EAAmCH,GAAnC,CAAR;AACAU,WAAOF,CAAP,EAAUI,SAAV;AACH,GAHD;AAKD,CA9BH","sourcesContent":["import {Sum,Sign,verifySign,CreateKeyPair} from './crypto'\nimport {jsRsaSign, KEYUTIL} from 'jsrsasign';\n\n\ndescribe('签名及签名验证测试', () => {\n    //生成密钥对\n    const kp1 = CreateKeyPair(\"EC\", \"secp256r1\");\n    const kp2 = CreateKeyPair(\"EC\", \"secp256r1\");\n    const ct1 = 'hello repchain1'\n    const ct2 = 'hello repchain2'\n\n    let alg = 'SHA1withECDSA';\n    let s11 = Sign(alg, kp1.prvKeyObj, ct1);\n    let s12 = Sign(alg, kp1.prvKeyObj, ct2);\n\n// 仅应用到当前 describe 块中的测试\n    beforeEach(() => {\n        \n        \n    });\n\n    test('同一对密钥对相同内容的签名验证可以通过', () => {\n        let r = verifySign(alg,kp1.pubKeyObj, s11, ct1 )\n        expect(r).toBeTruthy();\n    });\n    test('同一对密钥对不同内容的签名验证不应通过', () => {\n        let r = verifySign(alg,kp1.pubKeyObj, s11, ct2 )\n        expect(r).toBeFalsy();\n    });\n    test('不同的密钥对相同内容的签名验证不应通过', () => {\n        let r = verifySign(alg,kp2.pubKeyObj, s11, ct1 )\n        expect(r).toBeFalsy();\n    });\n\n  });\n  \n"],"file":"crypto.test.js"}